from collections import namedtuple


# Contains all information about a given sequence.
tSequenceReport = namedtuple('tSequenceReport', 
		['bPasses_filters', 
		'printready_output_string',
		'input_id',
		'input_seq',
		'output_id',
		'output_seq',
		'seq_is_reversed',
		'start_pos_forward_primer',
		'end_pos_forward_primer',
		'start_pos_ending_seq',
		'end_pos_ending_seq', 
		'errors_within_sequence'])


sFORWARD_PRIMER = 'CGCAATTCCTTTAGTTGTTC'
sFORWARD_PRIMER_COMPLEMENT = 'GAACAACTAAAGGAATTGCG'
sREVERSE_PRIMER = 'AACCTCATACAGAAAATTCA'
sREVERSE_PRIMER_COMPLEMENT = 'TGAATTTTCTGTATGAGGTTTTGC'
sBEGINNING_FLANKING_SEQUENCE = 'CGACGGGGCT'
sENDING_FLANKING_SEQUENCE = 'GGGGCCGCTG'
sBEGINNING_FLANKING_SEQUENCE_COMPLEMENT = 'AGCCCCGTCG'
sENDING_FLANKING_SEQUENCE_COMPLEMENT = 'CAGCGGCCCC'


dUnitTestSequences = {
'everything good # 1': 'AGTCATCGCAATTCCTTTAGTTGTTCCTTTCTATTCTCACTCGGTCGACGGGGCTTGTACGGGGAAGAAGCCTTTGTTTTGTTGTGGGGCCGCTGGGGCCGAAACTGTTGAAAGTTGTTTAGCAAAACCTCATACAGAAAATTCA',
'everything good # 2': 'ATGTCACGCAATTCCTTTAGTTGTTCCTTTCTATTCTCACTCGGCCGACGGGGCTTGTTCGTTTCTCGATCTTGCCGATTGTGGGGCCGCTGGGGCCGAAACTGTTGAAAGTTGTTTAGCAAAACCTCATACAGAAAATTCA',
'everything good # 3 (reversed and with complement)': 'TGAATTTTCTGTATGAGGTTTTGCTAAACAACTTTCAACAGTTTCGGCCCCAGCGGCCCCACACTTCAGAGACATAGTCCGCTCACGACAAGCCCCGTCGGCCGAGTGAGAATAGAAAGGAACAACTAAAGGAATTGCGATGACT',
'everything good # 4 (reversed and with complement)':'ACTATGAATTTTCTGTATGAGGTTTTGCTAAACAACTTTCAACAGTTTCGGCCCCAGCGGCCCCACACCTCCCCAGCATATCCGACCCACAAGCCCCGTCGGCCGAGTGAGAATAGAAAGGAACAACTAAAGGAATTGCGTAGT',
'forward primer has random char inserted':'AGTCATCGCAATTCCTTTAZGTTGTTCCTTTCTATTCTCACTCGGTCGACGGGGCTTGTACGGGGAAGAAGCCTTTGTTTTGTTGTGGGGCCGCTGGGGCCGAAACTGTTGAAAGTTGTTTAGCAAAACCTCATACAGAAAATTCA',
'begins with nonexistent tissue tag':'ZZZZZAGTCATCGCAATTCCTTTAGTTGTTCCTTTCTATTCTCACTCGGTCGACGGGGCTTGTACGGGGAAGAAGCCTTTGTTTTGTTGTGGGGCCGCTGGGGCCGAAACTGTTGAAAGTTGTTTAGCAAAACCTCATACAGAAAATTCA',
'contains non-multiple-of-3 length of insert-sequence':'AGTCATCGCAATTCCTTTAGTTGTTCCTTTCTATTCTCACTCGGTCGACGGGGCTTGTACGGGGZZAAGAAGCCTTTGTTTTGTTGTGGGGCCGCTGGGGCCGAAACTGTTGAAAGTTGTTTAGCAAAACCTCATACAGAAAATTCA',
'contains incorrect beginning flanking sequence':'AGTCATCGCAATTCCTTTAGTTGTTCCTTTCTATTCTCACTCGGTCGZZZZZACGGGGCTTGTACGGGGAAGAAGCCTTTGTTTTGTTGTGGGGCCGCTGGGGCCGAAACTGTTGAAAGTTGTTTAGCAAAACCTCATACAGAAAATTCA'
}


#def ParseTissueTagsFile():
#	pass

#dTissueTagsDictionary = ParseTissueTagsFile()
